name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v0.1.8'

permissions:
  contents: write    # Create releases and push tags
  packages: write    # Publish packages  
  actions: read      # Read artifacts

jobs:
  build-and-release:
    name: Build DXT Packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-latest
            arch: x64
            platform: darwin-x64
            node-arch: x64
          - os: macos-14
            arch: arm64
            platform: darwin-arm64
            node-arch: arm64
          # Linux
          - os: ubuntu-latest
            arch: x64
            platform: linux-x64
            node-arch: x64
          - os: ubuntu-latest
            arch: arm64
            platform: linux-arm64
            node-arch: arm64
          # Windows
          - os: windows-latest
            arch: x64
            platform: win32-x64
            node-arch: x64
          - os: windows-latest
            arch: arm64
            platform: win32-arm64
            node-arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          architecture: ${{ matrix.node-arch }}
          cache: 'npm'
        continue-on-error: ${{ matrix.arch == 'arm64' }}

      - name: Fallback Node.js setup for ARM64
        if: failure() && matrix.arch == 'arm64'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Don't specify architecture for fallback
          cache: 'npm'
          
      - name: Alternative Node.js for persistent ARM64 issues
        if: failure() && matrix.arch == 'arm64'
        run: |
          # Use Node.js from system package manager as last resort
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          elif [[ "${{ matrix.os }}" == "macos-"* ]]; then
            # macOS ARM64 systems should have working Node.js
            brew install node@20 || true
          fi
          node --version || echo "Node.js still not working"
          npm --version || echo "npm still not working"

      - name: Install root dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Install DXT dependencies
        working-directory: ./dxt
        run: npm ci

      - name: Build DXT package
        shell: bash
        working-directory: ./dxt
        run: |
          # Create platform-specific DXT filename
          DXT_FILE="../n8n-mcp-server-${{ matrix.platform }}.dxt"
          
          # Build using official DXT tool with error handling
          if npx @anthropic-ai/dxt pack . "$DXT_FILE"; then
            echo "✅ DXT package built successfully: $DXT_FILE"
            ls -la "$DXT_FILE"
          else
            echo "❌ DXT build failed, trying alternative approach"
            # Fallback to simple zip if DXT tool fails
            zip -r "$DXT_FILE" . -x "node_modules/.cache/*" "*.log"
            echo "⚠️  Created fallback DXT package: $DXT_FILE"
          fi
          
          # Verify file exists
          if [[ ! -f "$DXT_FILE" ]]; then
            echo "❌ DXT file not created: $DXT_FILE"
            exit 1
          fi
          
          echo "DXT_FILE=$DXT_FILE" >> $GITHUB_ENV

      - name: Upload DXT artifacts
        uses: actions/upload-artifact@v4
        with:
          name: n8n-mcp-server-${{ matrix.platform }}
          path: n8n-mcp-server-${{ matrix.platform }}.dxt
          retention-days: 30

  release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find ./artifacts -name "*.dxt" -exec cp {} release/ \;
          ls -la release/

      - name: Get release tag
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          body: |
            # n8n MCP Server ${{ steps.get_tag.outputs.tag }}
            
            Desktop Extension packages for different platforms:
            
            ## Downloads
            - **macOS Intel**: `n8n-mcp-server-darwin-x64.dxt`
            - **macOS Apple Silicon**: `n8n-mcp-server-darwin-arm64.dxt`  
            - **Linux x64**: `n8n-mcp-server-linux-x64.dxt`
            - **Linux ARM64**: `n8n-mcp-server-linux-arm64.dxt`
            - **Windows x64**: `n8n-mcp-server-win32-x64.dxt`
            - **Windows ARM64**: `n8n-mcp-server-win32-arm64.dxt`
            
            ## Installation
            1. Download the appropriate `.dxt` file for your platform
            2. Drag the `.dxt` file into Claude Desktop
            3. Configure your n8n API settings in Claude Desktop Extensions
            
            ## Requirements
            - Claude Desktop latest version
            - n8n instance with API access enabled
            - Node.js 20+ (for development)
            
            **Total Tools**: 25 n8n workflow automation tools
          files: |
            release/*.dxt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-release:
    name: Publish to npm
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: '@liemle3893'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}